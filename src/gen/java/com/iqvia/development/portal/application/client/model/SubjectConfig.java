/*
 * WSO2 Identity Server - Application Management Rest API
 * This document specifies a **Application Management RESTful API** for **WSO2 Identity Server** . 
 *
 * OpenAPI spec version: v1
 * Contact: architecture@wso2.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.iqvia.development.portal.application.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.iqvia.development.portal.application.client.model.Claim;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * SubjectConfig
 */


public class SubjectConfig {
  @SerializedName("claim")
  private Claim claim = null;

  @SerializedName("includeUserDomain")
  private Boolean includeUserDomain = null;

  @SerializedName("includeTenantDomain")
  private Boolean includeTenantDomain = null;

  @SerializedName("useMappedLocalSubject")
  private Boolean useMappedLocalSubject = null;

  public SubjectConfig claim(Claim claim) {
    this.claim = claim;
    return this;
  }

   /**
   * Get claim
   * @return claim
  **/
  @Schema(description = "")
  public Claim getClaim() {
    return claim;
  }

  public void setClaim(Claim claim) {
    this.claim = claim;
  }

  public SubjectConfig includeUserDomain(Boolean includeUserDomain) {
    this.includeUserDomain = includeUserDomain;
    return this;
  }

   /**
   * Get includeUserDomain
   * @return includeUserDomain
  **/
  @Schema(example = "false", description = "")
  public Boolean isIncludeUserDomain() {
    return includeUserDomain;
  }

  public void setIncludeUserDomain(Boolean includeUserDomain) {
    this.includeUserDomain = includeUserDomain;
  }

  public SubjectConfig includeTenantDomain(Boolean includeTenantDomain) {
    this.includeTenantDomain = includeTenantDomain;
    return this;
  }

   /**
   * Get includeTenantDomain
   * @return includeTenantDomain
  **/
  @Schema(example = "false", description = "")
  public Boolean isIncludeTenantDomain() {
    return includeTenantDomain;
  }

  public void setIncludeTenantDomain(Boolean includeTenantDomain) {
    this.includeTenantDomain = includeTenantDomain;
  }

  public SubjectConfig useMappedLocalSubject(Boolean useMappedLocalSubject) {
    this.useMappedLocalSubject = useMappedLocalSubject;
    return this;
  }

   /**
   * Get useMappedLocalSubject
   * @return useMappedLocalSubject
  **/
  @Schema(example = "false", description = "")
  public Boolean isUseMappedLocalSubject() {
    return useMappedLocalSubject;
  }

  public void setUseMappedLocalSubject(Boolean useMappedLocalSubject) {
    this.useMappedLocalSubject = useMappedLocalSubject;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubjectConfig subjectConfig = (SubjectConfig) o;
    return Objects.equals(this.claim, subjectConfig.claim) &&
        Objects.equals(this.includeUserDomain, subjectConfig.includeUserDomain) &&
        Objects.equals(this.includeTenantDomain, subjectConfig.includeTenantDomain) &&
        Objects.equals(this.useMappedLocalSubject, subjectConfig.useMappedLocalSubject);
  }

  @Override
  public int hashCode() {
    return Objects.hash(claim, includeUserDomain, includeTenantDomain, useMappedLocalSubject);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubjectConfig {\n");
    
    sb.append("    claim: ").append(toIndentedString(claim)).append("\n");
    sb.append("    includeUserDomain: ").append(toIndentedString(includeUserDomain)).append("\n");
    sb.append("    includeTenantDomain: ").append(toIndentedString(includeTenantDomain)).append("\n");
    sb.append("    useMappedLocalSubject: ").append(toIndentedString(useMappedLocalSubject)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
