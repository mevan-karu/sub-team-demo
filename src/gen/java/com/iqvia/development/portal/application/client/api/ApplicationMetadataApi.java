/*
 * WSO2 Identity Server - Application Management Rest API
 * This document specifies a **Application Management RESTful API** for **WSO2 Identity Server** . 
 *
 * OpenAPI spec version: v1
 * Contact: architecture@wso2.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.iqvia.development.portal.application.client.api;

import com.iqvia.development.portal.application.client.ApiCallback;
import com.iqvia.development.portal.application.client.ApiClient;
import com.iqvia.development.portal.application.client.ApiException;
import com.iqvia.development.portal.application.client.ApiResponse;
import com.iqvia.development.portal.application.client.Configuration;
import com.iqvia.development.portal.application.client.Pair;
import com.iqvia.development.portal.application.client.ProgressRequestBody;
import com.iqvia.development.portal.application.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.iqvia.development.portal.application.client.model.AdaptiveAuthTemplates;
import com.iqvia.development.portal.application.client.model.AuthProtocolMetadata;
import com.iqvia.development.portal.application.client.model.CustomInboundProtocolMetaData;
import com.iqvia.development.portal.application.client.model.Error;
import com.iqvia.development.portal.application.client.model.OIDCMetaData;
import com.iqvia.development.portal.application.client.model.SAMLMetaData;
import com.iqvia.development.portal.application.client.model.WSTrustMetaData;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ApplicationMetadataApi {
    private ApiClient apiClient;

    public ApplicationMetadataApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApplicationMetadataApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getAdaptiveAuthTemplates
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAdaptiveAuthTemplatesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/applications/meta/adaptive-auth-templates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAdaptiveAuthTemplatesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getAdaptiveAuthTemplatesCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve the sample adaptive authentication templates. 
     * This API provides the capability to retrieve the sample adaptive authentication templates. 
     * @return AdaptiveAuthTemplates
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AdaptiveAuthTemplates getAdaptiveAuthTemplates() throws ApiException {
        ApiResponse<AdaptiveAuthTemplates> resp = getAdaptiveAuthTemplatesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve the sample adaptive authentication templates. 
     * This API provides the capability to retrieve the sample adaptive authentication templates. 
     * @return ApiResponse&lt;AdaptiveAuthTemplates&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AdaptiveAuthTemplates> getAdaptiveAuthTemplatesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getAdaptiveAuthTemplatesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<AdaptiveAuthTemplates>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve the sample adaptive authentication templates.  (asynchronously)
     * This API provides the capability to retrieve the sample adaptive authentication templates. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAdaptiveAuthTemplatesAsync(final ApiCallback<AdaptiveAuthTemplates> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAdaptiveAuthTemplatesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AdaptiveAuthTemplates>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCustomProtocolMetadata
     * @param inboundProtocolId Inbound Authentication Protocol ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCustomProtocolMetadataCall(String inboundProtocolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/applications/meta/inbound-protocols/{inboundProtocolId}"
            .replaceAll("\\{" + "inboundProtocolId" + "\\}", apiClient.escapeString(inboundProtocolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCustomProtocolMetadataValidateBeforeCall(String inboundProtocolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'inboundProtocolId' is set
        if (inboundProtocolId == null) {
            throw new ApiException("Missing the required parameter 'inboundProtocolId' when calling getCustomProtocolMetadata(Async)");
        }
        
        com.squareup.okhttp.Call call = getCustomProtocolMetadataCall(inboundProtocolId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve all the metadata related to the custom auth protocol identified by the inboundProtocolId 
     * This API provides the capability to retrieve all the metadata related to the custom auth protocol identified by the inboundProtocolId. 
     * @param inboundProtocolId Inbound Authentication Protocol ID (required)
     * @return CustomInboundProtocolMetaData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomInboundProtocolMetaData getCustomProtocolMetadata(String inboundProtocolId) throws ApiException {
        ApiResponse<CustomInboundProtocolMetaData> resp = getCustomProtocolMetadataWithHttpInfo(inboundProtocolId);
        return resp.getData();
    }

    /**
     * Retrieve all the metadata related to the custom auth protocol identified by the inboundProtocolId 
     * This API provides the capability to retrieve all the metadata related to the custom auth protocol identified by the inboundProtocolId. 
     * @param inboundProtocolId Inbound Authentication Protocol ID (required)
     * @return ApiResponse&lt;CustomInboundProtocolMetaData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomInboundProtocolMetaData> getCustomProtocolMetadataWithHttpInfo(String inboundProtocolId) throws ApiException {
        com.squareup.okhttp.Call call = getCustomProtocolMetadataValidateBeforeCall(inboundProtocolId, null, null);
        Type localVarReturnType = new TypeToken<CustomInboundProtocolMetaData>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve all the metadata related to the custom auth protocol identified by the inboundProtocolId  (asynchronously)
     * This API provides the capability to retrieve all the metadata related to the custom auth protocol identified by the inboundProtocolId. 
     * @param inboundProtocolId Inbound Authentication Protocol ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCustomProtocolMetadataAsync(String inboundProtocolId, final ApiCallback<CustomInboundProtocolMetaData> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCustomProtocolMetadataValidateBeforeCall(inboundProtocolId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomInboundProtocolMetaData>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getInboundProtocols
     * @param customOnly Send only the custom inbound protocols.  (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getInboundProtocolsCall(Boolean customOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/applications/meta/inbound-protocols";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (customOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("customOnly", customOnly));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInboundProtocolsValidateBeforeCall(Boolean customOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getInboundProtocolsCall(customOnly, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve the list of inbound authentication protocols available 
     * This API provides the capability to retrieve the list of inbound authentication protocols available. If the query parameter &#x27;customOnly&#x27; is set to true, only custom inbound protocols will be listed. 
     * @param customOnly Send only the custom inbound protocols.  (optional, default to false)
     * @return List&lt;AuthProtocolMetadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AuthProtocolMetadata> getInboundProtocols(Boolean customOnly) throws ApiException {
        ApiResponse<List<AuthProtocolMetadata>> resp = getInboundProtocolsWithHttpInfo(customOnly);
        return resp.getData();
    }

    /**
     * Retrieve the list of inbound authentication protocols available 
     * This API provides the capability to retrieve the list of inbound authentication protocols available. If the query parameter &#x27;customOnly&#x27; is set to true, only custom inbound protocols will be listed. 
     * @param customOnly Send only the custom inbound protocols.  (optional, default to false)
     * @return ApiResponse&lt;List&lt;AuthProtocolMetadata&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AuthProtocolMetadata>> getInboundProtocolsWithHttpInfo(Boolean customOnly) throws ApiException {
        com.squareup.okhttp.Call call = getInboundProtocolsValidateBeforeCall(customOnly, null, null);
        Type localVarReturnType = new TypeToken<List<AuthProtocolMetadata>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve the list of inbound authentication protocols available  (asynchronously)
     * This API provides the capability to retrieve the list of inbound authentication protocols available. If the query parameter &#x27;customOnly&#x27; is set to true, only custom inbound protocols will be listed. 
     * @param customOnly Send only the custom inbound protocols.  (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInboundProtocolsAsync(Boolean customOnly, final ApiCallback<List<AuthProtocolMetadata>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInboundProtocolsValidateBeforeCall(customOnly, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AuthProtocolMetadata>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOIDCMetadata
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOIDCMetadataCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/applications/meta/inbound-protocols/oidc";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOIDCMetadataValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getOIDCMetadataCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve all the metadata related to the authentication protocol OAuth / OIDC 
     * This API provides the capability to retrieve all the metadata related to the authentication  protocol OAuth / OIDC. 
     * @return OIDCMetaData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OIDCMetaData getOIDCMetadata() throws ApiException {
        ApiResponse<OIDCMetaData> resp = getOIDCMetadataWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve all the metadata related to the authentication protocol OAuth / OIDC 
     * This API provides the capability to retrieve all the metadata related to the authentication  protocol OAuth / OIDC. 
     * @return ApiResponse&lt;OIDCMetaData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OIDCMetaData> getOIDCMetadataWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getOIDCMetadataValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<OIDCMetaData>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve all the metadata related to the authentication protocol OAuth / OIDC  (asynchronously)
     * This API provides the capability to retrieve all the metadata related to the authentication  protocol OAuth / OIDC. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOIDCMetadataAsync(final ApiCallback<OIDCMetaData> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOIDCMetadataValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OIDCMetaData>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSAMLMetadata
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSAMLMetadataCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/applications/meta/inbound-protocols/saml";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSAMLMetadataValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getSAMLMetadataCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve all the metadata related to the auth protocol SAML 
     * This API provides the capability to retrieve all the metadata related to the auth protocol SAML. 
     * @return SAMLMetaData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SAMLMetaData getSAMLMetadata() throws ApiException {
        ApiResponse<SAMLMetaData> resp = getSAMLMetadataWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve all the metadata related to the auth protocol SAML 
     * This API provides the capability to retrieve all the metadata related to the auth protocol SAML. 
     * @return ApiResponse&lt;SAMLMetaData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SAMLMetaData> getSAMLMetadataWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getSAMLMetadataValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<SAMLMetaData>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve all the metadata related to the auth protocol SAML  (asynchronously)
     * This API provides the capability to retrieve all the metadata related to the auth protocol SAML. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSAMLMetadataAsync(final ApiCallback<SAMLMetaData> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSAMLMetadataValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SAMLMetaData>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getWSTrustMetadata
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getWSTrustMetadataCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/applications/meta/inbound-protocols/ws-trust";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWSTrustMetadataValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getWSTrustMetadataCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve all the metadata related to the auth protocol WS Trust 
     * This API provides the capability to retrieve all the metadata related to the auth protocol WS_Trust. 
     * @return WSTrustMetaData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WSTrustMetaData getWSTrustMetadata() throws ApiException {
        ApiResponse<WSTrustMetaData> resp = getWSTrustMetadataWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve all the metadata related to the auth protocol WS Trust 
     * This API provides the capability to retrieve all the metadata related to the auth protocol WS_Trust. 
     * @return ApiResponse&lt;WSTrustMetaData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WSTrustMetaData> getWSTrustMetadataWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getWSTrustMetadataValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<WSTrustMetaData>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve all the metadata related to the auth protocol WS Trust  (asynchronously)
     * This API provides the capability to retrieve all the metadata related to the auth protocol WS_Trust. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWSTrustMetadataAsync(final ApiCallback<WSTrustMetaData> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWSTrustMetadataValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WSTrustMetaData>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
