/*
 * WSO2 Identity Server - Application Management Rest API
 * This document specifies a **Application Management RESTful API** for **WSO2 Identity Server** . 
 *
 * OpenAPI spec version: v1
 * Contact: architecture@wso2.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.iqvia.development.portal.application.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.iqvia.development.portal.application.client.model.Certificate;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * AdvancedApplicationConfiguration
 */


public class AdvancedApplicationConfiguration {
  @SerializedName("saas")
  private Boolean saas = null;

  @SerializedName("discoverableByEndUsers")
  private Boolean discoverableByEndUsers = null;

  @SerializedName("certificate")
  private Certificate certificate = null;

  @SerializedName("skipConsent")
  private Boolean skipConsent = null;

  @SerializedName("returnAuthenticatedIdpList")
  private Boolean returnAuthenticatedIdpList = null;

  @SerializedName("enableAuthorization")
  private Boolean enableAuthorization = null;

  public AdvancedApplicationConfiguration saas(Boolean saas) {
    this.saas = saas;
    return this;
  }

   /**
   * Decides whether the application is accessible across tenants.
   * @return saas
  **/
  @Schema(example = "false", description = "Decides whether the application is accessible across tenants.")
  public Boolean isSaas() {
    return saas;
  }

  public void setSaas(Boolean saas) {
    this.saas = saas;
  }

  public AdvancedApplicationConfiguration discoverableByEndUsers(Boolean discoverableByEndUsers) {
    this.discoverableByEndUsers = discoverableByEndUsers;
    return this;
  }

   /**
   * Decides whether the application is visible for end users.
   * @return discoverableByEndUsers
  **/
  @Schema(example = "false", description = "Decides whether the application is visible for end users.")
  public Boolean isDiscoverableByEndUsers() {
    return discoverableByEndUsers;
  }

  public void setDiscoverableByEndUsers(Boolean discoverableByEndUsers) {
    this.discoverableByEndUsers = discoverableByEndUsers;
  }

  public AdvancedApplicationConfiguration certificate(Certificate certificate) {
    this.certificate = certificate;
    return this;
  }

   /**
   * Get certificate
   * @return certificate
  **/
  @Schema(description = "")
  public Certificate getCertificate() {
    return certificate;
  }

  public void setCertificate(Certificate certificate) {
    this.certificate = certificate;
  }

  public AdvancedApplicationConfiguration skipConsent(Boolean skipConsent) {
    this.skipConsent = skipConsent;
    return this;
  }

   /**
   * Decides whether user consent needs to be skipped during login flows.
   * @return skipConsent
  **/
  @Schema(example = "false", description = "Decides whether user consent needs to be skipped during login flows.")
  public Boolean isSkipConsent() {
    return skipConsent;
  }

  public void setSkipConsent(Boolean skipConsent) {
    this.skipConsent = skipConsent;
  }

  public AdvancedApplicationConfiguration returnAuthenticatedIdpList(Boolean returnAuthenticatedIdpList) {
    this.returnAuthenticatedIdpList = returnAuthenticatedIdpList;
    return this;
  }

   /**
   * Decides whether the list of authenticated identity providers need to be returned in the authentication response.
   * @return returnAuthenticatedIdpList
  **/
  @Schema(example = "false", description = "Decides whether the list of authenticated identity providers need to be returned in the authentication response.")
  public Boolean isReturnAuthenticatedIdpList() {
    return returnAuthenticatedIdpList;
  }

  public void setReturnAuthenticatedIdpList(Boolean returnAuthenticatedIdpList) {
    this.returnAuthenticatedIdpList = returnAuthenticatedIdpList;
  }

  public AdvancedApplicationConfiguration enableAuthorization(Boolean enableAuthorization) {
    this.enableAuthorization = enableAuthorization;
    return this;
  }

   /**
   * Decides whether authorization policies needs to be engaged during authentication flows.
   * @return enableAuthorization
  **/
  @Schema(example = "true", description = "Decides whether authorization policies needs to be engaged during authentication flows.")
  public Boolean isEnableAuthorization() {
    return enableAuthorization;
  }

  public void setEnableAuthorization(Boolean enableAuthorization) {
    this.enableAuthorization = enableAuthorization;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdvancedApplicationConfiguration advancedApplicationConfiguration = (AdvancedApplicationConfiguration) o;
    return Objects.equals(this.saas, advancedApplicationConfiguration.saas) &&
        Objects.equals(this.discoverableByEndUsers, advancedApplicationConfiguration.discoverableByEndUsers) &&
        Objects.equals(this.certificate, advancedApplicationConfiguration.certificate) &&
        Objects.equals(this.skipConsent, advancedApplicationConfiguration.skipConsent) &&
        Objects.equals(this.returnAuthenticatedIdpList, advancedApplicationConfiguration.returnAuthenticatedIdpList) &&
        Objects.equals(this.enableAuthorization, advancedApplicationConfiguration.enableAuthorization);
  }

  @Override
  public int hashCode() {
    return Objects.hash(saas, discoverableByEndUsers, certificate, skipConsent, returnAuthenticatedIdpList, enableAuthorization);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdvancedApplicationConfiguration {\n");
    
    sb.append("    saas: ").append(toIndentedString(saas)).append("\n");
    sb.append("    discoverableByEndUsers: ").append(toIndentedString(discoverableByEndUsers)).append("\n");
    sb.append("    certificate: ").append(toIndentedString(certificate)).append("\n");
    sb.append("    skipConsent: ").append(toIndentedString(skipConsent)).append("\n");
    sb.append("    returnAuthenticatedIdpList: ").append(toIndentedString(returnAuthenticatedIdpList)).append("\n");
    sb.append("    enableAuthorization: ").append(toIndentedString(enableAuthorization)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
