/*
 * WSO2 Identity Server - Application Management Rest API
 * This document specifies a **Application Management RESTful API** for **WSO2 Identity Server** . 
 *
 * OpenAPI spec version: v1
 * Contact: architecture@wso2.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.iqvia.development.portal.application.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.iqvia.development.portal.application.client.model.AccessTokenConfiguration;
import com.iqvia.development.portal.application.client.model.IdTokenConfiguration;
import com.iqvia.development.portal.application.client.model.OAuth2PKCEConfiguration;
import com.iqvia.development.portal.application.client.model.OIDCLogoutConfiguration;
import com.iqvia.development.portal.application.client.model.RefreshTokenConfiguration;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * OpenIDConnectConfiguration
 */


public class OpenIDConnectConfiguration {
  @SerializedName("clientId")
  private String clientId = null;

  @SerializedName("clientSecret")
  private String clientSecret = null;

  /**
   * Gets or Sets state
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    ACTIVE("ACTIVE"),
    REVOKED("REVOKED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StateEnum fromValue(String text) {
      for (StateEnum b : StateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StateEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("state")
  private StateEnum state = StateEnum.ACTIVE;

  @SerializedName("grantTypes")
  private List<String> grantTypes = new ArrayList<>();

  @SerializedName("callbackURLs")
  private List<String> callbackURLs = null;

  @SerializedName("allowedOrigins")
  private List<String> allowedOrigins = null;

  @SerializedName("publicClient")
  private Boolean publicClient = false;

  @SerializedName("pkce")
  private OAuth2PKCEConfiguration pkce = null;

  @SerializedName("accessToken")
  private AccessTokenConfiguration accessToken = null;

  @SerializedName("refreshToken")
  private RefreshTokenConfiguration refreshToken = null;

  @SerializedName("idToken")
  private IdTokenConfiguration idToken = null;

  @SerializedName("logout")
  private OIDCLogoutConfiguration logout = null;

  @SerializedName("validateRequestObjectSignature")
  private Boolean validateRequestObjectSignature = false;

  @SerializedName("scopeValidators")
  private List<String> scopeValidators = null;

  @SerializedName("accessTokenBindingType")
  private String accessTokenBindingType = null;

  public OpenIDConnectConfiguration clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

   /**
   * Get clientId
   * @return clientId
  **/
  @Schema(description = "")
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }

  public OpenIDConnectConfiguration clientSecret(String clientSecret) {
    this.clientSecret = clientSecret;
    return this;
  }

   /**
   * Get clientSecret
   * @return clientSecret
  **/
  @Schema(description = "")
  public String getClientSecret() {
    return clientSecret;
  }

  public void setClientSecret(String clientSecret) {
    this.clientSecret = clientSecret;
  }

   /**
   * Get state
   * @return state
  **/
  @Schema(description = "")
  public StateEnum getState() {
    return state;
  }

  public OpenIDConnectConfiguration grantTypes(List<String> grantTypes) {
    this.grantTypes = grantTypes;
    return this;
  }

  public OpenIDConnectConfiguration addGrantTypesItem(String grantTypesItem) {
    this.grantTypes.add(grantTypesItem);
    return this;
  }

   /**
   * Get grantTypes
   * @return grantTypes
  **/
  @Schema(example = "[\"authorization_code\",\"password\"]", required = true, description = "")
  public List<String> getGrantTypes() {
    return grantTypes;
  }

  public void setGrantTypes(List<String> grantTypes) {
    this.grantTypes = grantTypes;
  }

  public OpenIDConnectConfiguration callbackURLs(List<String> callbackURLs) {
    this.callbackURLs = callbackURLs;
    return this;
  }

  public OpenIDConnectConfiguration addCallbackURLsItem(String callbackURLsItem) {
    if (this.callbackURLs == null) {
      this.callbackURLs = new ArrayList<>();
    }
    this.callbackURLs.add(callbackURLsItem);
    return this;
  }

   /**
   * Authorized redirect URIs
   * @return callbackURLs
  **/
  @Schema(example = "[\"https://app.example.com/callback1\",\"https://app.example.com/callback2\"]", description = "Authorized redirect URIs")
  public List<String> getCallbackURLs() {
    return callbackURLs;
  }

  public void setCallbackURLs(List<String> callbackURLs) {
    this.callbackURLs = callbackURLs;
  }

  public OpenIDConnectConfiguration allowedOrigins(List<String> allowedOrigins) {
    this.allowedOrigins = allowedOrigins;
    return this;
  }

  public OpenIDConnectConfiguration addAllowedOriginsItem(String allowedOriginsItem) {
    if (this.allowedOrigins == null) {
      this.allowedOrigins = new ArrayList<>();
    }
    this.allowedOrigins.add(allowedOriginsItem);
    return this;
  }

   /**
   * Authorized JavaScript origins
   * @return allowedOrigins
  **/
  @Schema(example = "[\"https://app.example.com/js\"]", description = "Authorized JavaScript origins")
  public List<String> getAllowedOrigins() {
    return allowedOrigins;
  }

  public void setAllowedOrigins(List<String> allowedOrigins) {
    this.allowedOrigins = allowedOrigins;
  }

  public OpenIDConnectConfiguration publicClient(Boolean publicClient) {
    this.publicClient = publicClient;
    return this;
  }

   /**
   * Enabling this option will allow the client to authenticate without a client secret.
   * @return publicClient
  **/
  @Schema(example = "false", description = "Enabling this option will allow the client to authenticate without a client secret.")
  public Boolean isPublicClient() {
    return publicClient;
  }

  public void setPublicClient(Boolean publicClient) {
    this.publicClient = publicClient;
  }

  public OpenIDConnectConfiguration pkce(OAuth2PKCEConfiguration pkce) {
    this.pkce = pkce;
    return this;
  }

   /**
   * Get pkce
   * @return pkce
  **/
  @Schema(description = "")
  public OAuth2PKCEConfiguration getPkce() {
    return pkce;
  }

  public void setPkce(OAuth2PKCEConfiguration pkce) {
    this.pkce = pkce;
  }

  public OpenIDConnectConfiguration accessToken(AccessTokenConfiguration accessToken) {
    this.accessToken = accessToken;
    return this;
  }

   /**
   * Get accessToken
   * @return accessToken
  **/
  @Schema(description = "")
  public AccessTokenConfiguration getAccessToken() {
    return accessToken;
  }

  public void setAccessToken(AccessTokenConfiguration accessToken) {
    this.accessToken = accessToken;
  }

  public OpenIDConnectConfiguration refreshToken(RefreshTokenConfiguration refreshToken) {
    this.refreshToken = refreshToken;
    return this;
  }

   /**
   * Get refreshToken
   * @return refreshToken
  **/
  @Schema(description = "")
  public RefreshTokenConfiguration getRefreshToken() {
    return refreshToken;
  }

  public void setRefreshToken(RefreshTokenConfiguration refreshToken) {
    this.refreshToken = refreshToken;
  }

  public OpenIDConnectConfiguration idToken(IdTokenConfiguration idToken) {
    this.idToken = idToken;
    return this;
  }

   /**
   * Get idToken
   * @return idToken
  **/
  @Schema(description = "")
  public IdTokenConfiguration getIdToken() {
    return idToken;
  }

  public void setIdToken(IdTokenConfiguration idToken) {
    this.idToken = idToken;
  }

  public OpenIDConnectConfiguration logout(OIDCLogoutConfiguration logout) {
    this.logout = logout;
    return this;
  }

   /**
   * Get logout
   * @return logout
  **/
  @Schema(description = "")
  public OIDCLogoutConfiguration getLogout() {
    return logout;
  }

  public void setLogout(OIDCLogoutConfiguration logout) {
    this.logout = logout;
  }

  public OpenIDConnectConfiguration validateRequestObjectSignature(Boolean validateRequestObjectSignature) {
    this.validateRequestObjectSignature = validateRequestObjectSignature;
    return this;
  }

   /**
   * Get validateRequestObjectSignature
   * @return validateRequestObjectSignature
  **/
  @Schema(example = "false", description = "")
  public Boolean isValidateRequestObjectSignature() {
    return validateRequestObjectSignature;
  }

  public void setValidateRequestObjectSignature(Boolean validateRequestObjectSignature) {
    this.validateRequestObjectSignature = validateRequestObjectSignature;
  }

  public OpenIDConnectConfiguration scopeValidators(List<String> scopeValidators) {
    this.scopeValidators = scopeValidators;
    return this;
  }

  public OpenIDConnectConfiguration addScopeValidatorsItem(String scopeValidatorsItem) {
    if (this.scopeValidators == null) {
      this.scopeValidators = new ArrayList<>();
    }
    this.scopeValidators.add(scopeValidatorsItem);
    return this;
  }

   /**
   * Get scopeValidators
   * @return scopeValidators
  **/
  @Schema(example = "[\"XACMLScopeValidator\",\"RoleBasedScopeValidator\"]", description = "")
  public List<String> getScopeValidators() {
    return scopeValidators;
  }

  public void setScopeValidators(List<String> scopeValidators) {
    this.scopeValidators = scopeValidators;
  }

  public OpenIDConnectConfiguration accessTokenBindingType(String accessTokenBindingType) {
    this.accessTokenBindingType = accessTokenBindingType;
    return this;
  }

   /**
   * Access token binding type.
   * @return accessTokenBindingType
  **/
  @Schema(example = "[\"sso-session\",\"cookie\"]", description = "Access token binding type.")
  public String getAccessTokenBindingType() {
    return accessTokenBindingType;
  }

  public void setAccessTokenBindingType(String accessTokenBindingType) {
    this.accessTokenBindingType = accessTokenBindingType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OpenIDConnectConfiguration openIDConnectConfiguration = (OpenIDConnectConfiguration) o;
    return Objects.equals(this.clientId, openIDConnectConfiguration.clientId) &&
        Objects.equals(this.clientSecret, openIDConnectConfiguration.clientSecret) &&
        Objects.equals(this.state, openIDConnectConfiguration.state) &&
        Objects.equals(this.grantTypes, openIDConnectConfiguration.grantTypes) &&
        Objects.equals(this.callbackURLs, openIDConnectConfiguration.callbackURLs) &&
        Objects.equals(this.allowedOrigins, openIDConnectConfiguration.allowedOrigins) &&
        Objects.equals(this.publicClient, openIDConnectConfiguration.publicClient) &&
        Objects.equals(this.pkce, openIDConnectConfiguration.pkce) &&
        Objects.equals(this.accessToken, openIDConnectConfiguration.accessToken) &&
        Objects.equals(this.refreshToken, openIDConnectConfiguration.refreshToken) &&
        Objects.equals(this.idToken, openIDConnectConfiguration.idToken) &&
        Objects.equals(this.logout, openIDConnectConfiguration.logout) &&
        Objects.equals(this.validateRequestObjectSignature, openIDConnectConfiguration.validateRequestObjectSignature) &&
        Objects.equals(this.scopeValidators, openIDConnectConfiguration.scopeValidators) &&
        Objects.equals(this.accessTokenBindingType, openIDConnectConfiguration.accessTokenBindingType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientId, clientSecret, state, grantTypes, callbackURLs, allowedOrigins, publicClient, pkce, accessToken, refreshToken, idToken, logout, validateRequestObjectSignature, scopeValidators, accessTokenBindingType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OpenIDConnectConfiguration {\n");
    
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    clientSecret: ").append(toIndentedString(clientSecret)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    grantTypes: ").append(toIndentedString(grantTypes)).append("\n");
    sb.append("    callbackURLs: ").append(toIndentedString(callbackURLs)).append("\n");
    sb.append("    allowedOrigins: ").append(toIndentedString(allowedOrigins)).append("\n");
    sb.append("    publicClient: ").append(toIndentedString(publicClient)).append("\n");
    sb.append("    pkce: ").append(toIndentedString(pkce)).append("\n");
    sb.append("    accessToken: ").append(toIndentedString(accessToken)).append("\n");
    sb.append("    refreshToken: ").append(toIndentedString(refreshToken)).append("\n");
    sb.append("    idToken: ").append(toIndentedString(idToken)).append("\n");
    sb.append("    logout: ").append(toIndentedString(logout)).append("\n");
    sb.append("    validateRequestObjectSignature: ").append(toIndentedString(validateRequestObjectSignature)).append("\n");
    sb.append("    scopeValidators: ").append(toIndentedString(scopeValidators)).append("\n");
    sb.append("    accessTokenBindingType: ").append(toIndentedString(accessTokenBindingType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
