/*
 * WSO2 Identity Server - Application Management Rest API
 * This document specifies a **Application Management RESTful API** for **WSO2 Identity Server** . 
 *
 * OpenAPI spec version: v1
 * Contact: architecture@wso2.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.iqvia.development.portal.application.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.iqvia.development.portal.application.client.model.ClaimMappings;
import com.iqvia.development.portal.application.client.model.RequestedClaimConfiguration;
import com.iqvia.development.portal.application.client.model.RoleConfig;
import com.iqvia.development.portal.application.client.model.SubjectConfig;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * ClaimConfiguration
 */


public class ClaimConfiguration {
  /**
   * Gets or Sets dialect
   */
  @JsonAdapter(DialectEnum.Adapter.class)
  public enum DialectEnum {
    CUSTOM("CUSTOM"),
    LOCAL("LOCAL");

    private String value;

    DialectEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static DialectEnum fromValue(String text) {
      for (DialectEnum b : DialectEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<DialectEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DialectEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DialectEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return DialectEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("dialect")
  private DialectEnum dialect = DialectEnum.LOCAL;

  @SerializedName("claimMappings")
  private List<ClaimMappings> claimMappings = null;

  @SerializedName("requestedClaims")
  private List<RequestedClaimConfiguration> requestedClaims = null;

  @SerializedName("subject")
  private SubjectConfig subject = null;

  @SerializedName("role")
  private RoleConfig role = null;

  public ClaimConfiguration dialect(DialectEnum dialect) {
    this.dialect = dialect;
    return this;
  }

   /**
   * Get dialect
   * @return dialect
  **/
  @Schema(description = "")
  public DialectEnum getDialect() {
    return dialect;
  }

  public void setDialect(DialectEnum dialect) {
    this.dialect = dialect;
  }

  public ClaimConfiguration claimMappings(List<ClaimMappings> claimMappings) {
    this.claimMappings = claimMappings;
    return this;
  }

  public ClaimConfiguration addClaimMappingsItem(ClaimMappings claimMappingsItem) {
    if (this.claimMappings == null) {
      this.claimMappings = new ArrayList<>();
    }
    this.claimMappings.add(claimMappingsItem);
    return this;
  }

   /**
   * Get claimMappings
   * @return claimMappings
  **/
  @Schema(description = "")
  public List<ClaimMappings> getClaimMappings() {
    return claimMappings;
  }

  public void setClaimMappings(List<ClaimMappings> claimMappings) {
    this.claimMappings = claimMappings;
  }

  public ClaimConfiguration requestedClaims(List<RequestedClaimConfiguration> requestedClaims) {
    this.requestedClaims = requestedClaims;
    return this;
  }

  public ClaimConfiguration addRequestedClaimsItem(RequestedClaimConfiguration requestedClaimsItem) {
    if (this.requestedClaims == null) {
      this.requestedClaims = new ArrayList<>();
    }
    this.requestedClaims.add(requestedClaimsItem);
    return this;
  }

   /**
   * Get requestedClaims
   * @return requestedClaims
  **/
  @Schema(description = "")
  public List<RequestedClaimConfiguration> getRequestedClaims() {
    return requestedClaims;
  }

  public void setRequestedClaims(List<RequestedClaimConfiguration> requestedClaims) {
    this.requestedClaims = requestedClaims;
  }

  public ClaimConfiguration subject(SubjectConfig subject) {
    this.subject = subject;
    return this;
  }

   /**
   * Get subject
   * @return subject
  **/
  @Schema(description = "")
  public SubjectConfig getSubject() {
    return subject;
  }

  public void setSubject(SubjectConfig subject) {
    this.subject = subject;
  }

  public ClaimConfiguration role(RoleConfig role) {
    this.role = role;
    return this;
  }

   /**
   * Get role
   * @return role
  **/
  @Schema(description = "")
  public RoleConfig getRole() {
    return role;
  }

  public void setRole(RoleConfig role) {
    this.role = role;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClaimConfiguration claimConfiguration = (ClaimConfiguration) o;
    return Objects.equals(this.dialect, claimConfiguration.dialect) &&
        Objects.equals(this.claimMappings, claimConfiguration.claimMappings) &&
        Objects.equals(this.requestedClaims, claimConfiguration.requestedClaims) &&
        Objects.equals(this.subject, claimConfiguration.subject) &&
        Objects.equals(this.role, claimConfiguration.role);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dialect, claimMappings, requestedClaims, subject, role);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClaimConfiguration {\n");
    
    sb.append("    dialect: ").append(toIndentedString(dialect)).append("\n");
    sb.append("    claimMappings: ").append(toIndentedString(claimMappings)).append("\n");
    sb.append("    requestedClaims: ").append(toIndentedString(requestedClaims)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
