/*
 * WSO2 Identity Server - Application Management Rest API
 * This document specifies a **Application Management RESTful API** for **WSO2 Identity Server** . 
 *
 * OpenAPI spec version: v1
 * Contact: architecture@wso2.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.iqvia.development.portal.application.client.api;

import com.iqvia.development.portal.application.client.ApiCallback;
import com.iqvia.development.portal.application.client.ApiClient;
import com.iqvia.development.portal.application.client.ApiException;
import com.iqvia.development.portal.application.client.ApiResponse;
import com.iqvia.development.portal.application.client.Configuration;
import com.iqvia.development.portal.application.client.Pair;
import com.iqvia.development.portal.application.client.ProgressRequestBody;
import com.iqvia.development.portal.application.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.iqvia.development.portal.application.client.model.CustomInboundProtocolConfiguration;
import com.iqvia.development.portal.application.client.model.Error;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InboundProtocolsCustomApi {
    private ApiClient apiClient;

    public InboundProtocolsCustomApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InboundProtocolsCustomApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteCustomInboundConfiguration
     * @param applicationId ID of the application. (required)
     * @param inboundProtocolId Inbound Authentication Protocol ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteCustomInboundConfigurationCall(String applicationId, String inboundProtocolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/applications/{applicationId}/inbound-protocols/{inboundProtocolId}"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()))
            .replaceAll("\\{" + "inboundProtocolId" + "\\}", apiClient.escapeString(inboundProtocolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "OAuth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteCustomInboundConfigurationValidateBeforeCall(String applicationId, String inboundProtocolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling deleteCustomInboundConfiguration(Async)");
        }
        // verify the required parameter 'inboundProtocolId' is set
        if (inboundProtocolId == null) {
            throw new ApiException("Missing the required parameter 'inboundProtocolId' when calling deleteCustomInboundConfiguration(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteCustomInboundConfigurationCall(applicationId, inboundProtocolId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete custom inbound authentication protocol parameters of application 
     * This API provides the capability to delete custom inbound authentication protocol of an application. 
     * @param applicationId ID of the application. (required)
     * @param inboundProtocolId Inbound Authentication Protocol ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteCustomInboundConfiguration(String applicationId, String inboundProtocolId) throws ApiException {
        deleteCustomInboundConfigurationWithHttpInfo(applicationId, inboundProtocolId);
    }

    /**
     * Delete custom inbound authentication protocol parameters of application 
     * This API provides the capability to delete custom inbound authentication protocol of an application. 
     * @param applicationId ID of the application. (required)
     * @param inboundProtocolId Inbound Authentication Protocol ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteCustomInboundConfigurationWithHttpInfo(String applicationId, String inboundProtocolId) throws ApiException {
        com.squareup.okhttp.Call call = deleteCustomInboundConfigurationValidateBeforeCall(applicationId, inboundProtocolId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete custom inbound authentication protocol parameters of application  (asynchronously)
     * This API provides the capability to delete custom inbound authentication protocol of an application. 
     * @param applicationId ID of the application. (required)
     * @param inboundProtocolId Inbound Authentication Protocol ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteCustomInboundConfigurationAsync(String applicationId, String inboundProtocolId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteCustomInboundConfigurationValidateBeforeCall(applicationId, inboundProtocolId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getCustomInboundConfiguration
     * @param applicationId ID of the application (required)
     * @param inboundProtocolId Inbound Authentication Protocol ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCustomInboundConfigurationCall(String applicationId, String inboundProtocolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/applications/{applicationId}/inbound-protocols/{inboundProtocolId}"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()))
            .replaceAll("\\{" + "inboundProtocolId" + "\\}", apiClient.escapeString(inboundProtocolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCustomInboundConfigurationValidateBeforeCall(String applicationId, String inboundProtocolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling getCustomInboundConfiguration(Async)");
        }
        // verify the required parameter 'inboundProtocolId' is set
        if (inboundProtocolId == null) {
            throw new ApiException("Missing the required parameter 'inboundProtocolId' when calling getCustomInboundConfiguration(Async)");
        }
        
        com.squareup.okhttp.Call call = getCustomInboundConfigurationCall(applicationId, inboundProtocolId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve custom Inbound authentication protocol parameters of application. 
     * This API provides the capability to retrieve custom inbound authentication protocol parameters of an application. 
     * @param applicationId ID of the application (required)
     * @param inboundProtocolId Inbound Authentication Protocol ID (required)
     * @return CustomInboundProtocolConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomInboundProtocolConfiguration getCustomInboundConfiguration(String applicationId, String inboundProtocolId) throws ApiException {
        ApiResponse<CustomInboundProtocolConfiguration> resp = getCustomInboundConfigurationWithHttpInfo(applicationId, inboundProtocolId);
        return resp.getData();
    }

    /**
     * Retrieve custom Inbound authentication protocol parameters of application. 
     * This API provides the capability to retrieve custom inbound authentication protocol parameters of an application. 
     * @param applicationId ID of the application (required)
     * @param inboundProtocolId Inbound Authentication Protocol ID (required)
     * @return ApiResponse&lt;CustomInboundProtocolConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomInboundProtocolConfiguration> getCustomInboundConfigurationWithHttpInfo(String applicationId, String inboundProtocolId) throws ApiException {
        com.squareup.okhttp.Call call = getCustomInboundConfigurationValidateBeforeCall(applicationId, inboundProtocolId, null, null);
        Type localVarReturnType = new TypeToken<CustomInboundProtocolConfiguration>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve custom Inbound authentication protocol parameters of application.  (asynchronously)
     * This API provides the capability to retrieve custom inbound authentication protocol parameters of an application. 
     * @param applicationId ID of the application (required)
     * @param inboundProtocolId Inbound Authentication Protocol ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCustomInboundConfigurationAsync(String applicationId, String inboundProtocolId, final ApiCallback<CustomInboundProtocolConfiguration> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCustomInboundConfigurationValidateBeforeCall(applicationId, inboundProtocolId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomInboundProtocolConfiguration>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateCustomInboundConfiguration
     * @param body This represents the Custom Inbound authentication protocol parameters of an application. (required)
     * @param applicationId ID of the application. (required)
     * @param inboundProtocolId Inbound Authentication Protocol ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateCustomInboundConfigurationCall(CustomInboundProtocolConfiguration body, String applicationId, String inboundProtocolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/applications/{applicationId}/inbound-protocols/{inboundProtocolId}"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()))
            .replaceAll("\\{" + "inboundProtocolId" + "\\}", apiClient.escapeString(inboundProtocolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "OAuth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateCustomInboundConfigurationValidateBeforeCall(CustomInboundProtocolConfiguration body, String applicationId, String inboundProtocolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateCustomInboundConfiguration(Async)");
        }
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling updateCustomInboundConfiguration(Async)");
        }
        // verify the required parameter 'inboundProtocolId' is set
        if (inboundProtocolId == null) {
            throw new ApiException("Missing the required parameter 'inboundProtocolId' when calling updateCustomInboundConfiguration(Async)");
        }
        
        com.squareup.okhttp.Call call = updateCustomInboundConfigurationCall(body, applicationId, inboundProtocolId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update the custom inbound authentication protocol parameters of application 
     * This API provides the capability to store custom inbound authentication protocol parameters of an application. 
     * @param body This represents the Custom Inbound authentication protocol parameters of an application. (required)
     * @param applicationId ID of the application. (required)
     * @param inboundProtocolId Inbound Authentication Protocol ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateCustomInboundConfiguration(CustomInboundProtocolConfiguration body, String applicationId, String inboundProtocolId) throws ApiException {
        updateCustomInboundConfigurationWithHttpInfo(body, applicationId, inboundProtocolId);
    }

    /**
     * Update the custom inbound authentication protocol parameters of application 
     * This API provides the capability to store custom inbound authentication protocol parameters of an application. 
     * @param body This represents the Custom Inbound authentication protocol parameters of an application. (required)
     * @param applicationId ID of the application. (required)
     * @param inboundProtocolId Inbound Authentication Protocol ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateCustomInboundConfigurationWithHttpInfo(CustomInboundProtocolConfiguration body, String applicationId, String inboundProtocolId) throws ApiException {
        com.squareup.okhttp.Call call = updateCustomInboundConfigurationValidateBeforeCall(body, applicationId, inboundProtocolId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update the custom inbound authentication protocol parameters of application  (asynchronously)
     * This API provides the capability to store custom inbound authentication protocol parameters of an application. 
     * @param body This represents the Custom Inbound authentication protocol parameters of an application. (required)
     * @param applicationId ID of the application. (required)
     * @param inboundProtocolId Inbound Authentication Protocol ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateCustomInboundConfigurationAsync(CustomInboundProtocolConfiguration body, String applicationId, String inboundProtocolId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCustomInboundConfigurationValidateBeforeCall(body, applicationId, inboundProtocolId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
