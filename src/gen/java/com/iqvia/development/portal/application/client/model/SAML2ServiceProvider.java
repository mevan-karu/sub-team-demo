/*
 * WSO2 Identity Server - Application Management Rest API
 * This document specifies a **Application Management RESTful API** for **WSO2 Identity Server** . 
 *
 * OpenAPI spec version: v1
 * Contact: architecture@wso2.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.iqvia.development.portal.application.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.iqvia.development.portal.application.client.model.SAMLAttributeProfile;
import com.iqvia.development.portal.application.client.model.SAMLRequestValidation;
import com.iqvia.development.portal.application.client.model.SAMLResponseSigning;
import com.iqvia.development.portal.application.client.model.SingleLogoutProfile;
import com.iqvia.development.portal.application.client.model.SingleSignOnProfile;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * SAML2ServiceProvider
 */


public class SAML2ServiceProvider {
  @SerializedName("issuer")
  private String issuer = null;

  @SerializedName("serviceProviderQualifier")
  private String serviceProviderQualifier = null;

  @SerializedName("assertionConsumerUrls")
  private List<String> assertionConsumerUrls = new ArrayList<>();

  @SerializedName("defaultAssertionConsumerUrl")
  private String defaultAssertionConsumerUrl = null;

  @SerializedName("idpEntityIdAlias")
  private String idpEntityIdAlias = null;

  @SerializedName("singleSignOnProfile")
  private SingleSignOnProfile singleSignOnProfile = null;

  @SerializedName("attributeProfile")
  private SAMLAttributeProfile attributeProfile = null;

  @SerializedName("singleLogoutProfile")
  private SingleLogoutProfile singleLogoutProfile = null;

  @SerializedName("requestValidation")
  private SAMLRequestValidation requestValidation = null;

  @SerializedName("responseSigning")
  private SAMLResponseSigning responseSigning = null;

  @SerializedName("enableAssertionQueryProfile")
  private Boolean enableAssertionQueryProfile = false;

  public SAML2ServiceProvider issuer(String issuer) {
    this.issuer = issuer;
    return this;
  }

   /**
   * Get issuer
   * @return issuer
  **/
  @Schema(required = true, description = "")
  public String getIssuer() {
    return issuer;
  }

  public void setIssuer(String issuer) {
    this.issuer = issuer;
  }

  public SAML2ServiceProvider serviceProviderQualifier(String serviceProviderQualifier) {
    this.serviceProviderQualifier = serviceProviderQualifier;
    return this;
  }

   /**
   * Get serviceProviderQualifier
   * @return serviceProviderQualifier
  **/
  @Schema(description = "")
  public String getServiceProviderQualifier() {
    return serviceProviderQualifier;
  }

  public void setServiceProviderQualifier(String serviceProviderQualifier) {
    this.serviceProviderQualifier = serviceProviderQualifier;
  }

  public SAML2ServiceProvider assertionConsumerUrls(List<String> assertionConsumerUrls) {
    this.assertionConsumerUrls = assertionConsumerUrls;
    return this;
  }

  public SAML2ServiceProvider addAssertionConsumerUrlsItem(String assertionConsumerUrlsItem) {
    this.assertionConsumerUrls.add(assertionConsumerUrlsItem);
    return this;
  }

   /**
   * Get assertionConsumerUrls
   * @return assertionConsumerUrls
  **/
  @Schema(required = true, description = "")
  public List<String> getAssertionConsumerUrls() {
    return assertionConsumerUrls;
  }

  public void setAssertionConsumerUrls(List<String> assertionConsumerUrls) {
    this.assertionConsumerUrls = assertionConsumerUrls;
  }

  public SAML2ServiceProvider defaultAssertionConsumerUrl(String defaultAssertionConsumerUrl) {
    this.defaultAssertionConsumerUrl = defaultAssertionConsumerUrl;
    return this;
  }

   /**
   * If not provided, the first assertion consumer URL on the assertionConsumerUrls will be picked as the default assertion consumer URL.
   * @return defaultAssertionConsumerUrl
  **/
  @Schema(description = "If not provided, the first assertion consumer URL on the assertionConsumerUrls will be picked as the default assertion consumer URL.")
  public String getDefaultAssertionConsumerUrl() {
    return defaultAssertionConsumerUrl;
  }

  public void setDefaultAssertionConsumerUrl(String defaultAssertionConsumerUrl) {
    this.defaultAssertionConsumerUrl = defaultAssertionConsumerUrl;
  }

  public SAML2ServiceProvider idpEntityIdAlias(String idpEntityIdAlias) {
    this.idpEntityIdAlias = idpEntityIdAlias;
    return this;
  }

   /**
   * Default value is the IdP Entity ID value specified in Resident IdP.
   * @return idpEntityIdAlias
  **/
  @Schema(description = "Default value is the IdP Entity ID value specified in Resident IdP.")
  public String getIdpEntityIdAlias() {
    return idpEntityIdAlias;
  }

  public void setIdpEntityIdAlias(String idpEntityIdAlias) {
    this.idpEntityIdAlias = idpEntityIdAlias;
  }

  public SAML2ServiceProvider singleSignOnProfile(SingleSignOnProfile singleSignOnProfile) {
    this.singleSignOnProfile = singleSignOnProfile;
    return this;
  }

   /**
   * Get singleSignOnProfile
   * @return singleSignOnProfile
  **/
  @Schema(description = "")
  public SingleSignOnProfile getSingleSignOnProfile() {
    return singleSignOnProfile;
  }

  public void setSingleSignOnProfile(SingleSignOnProfile singleSignOnProfile) {
    this.singleSignOnProfile = singleSignOnProfile;
  }

  public SAML2ServiceProvider attributeProfile(SAMLAttributeProfile attributeProfile) {
    this.attributeProfile = attributeProfile;
    return this;
  }

   /**
   * Get attributeProfile
   * @return attributeProfile
  **/
  @Schema(description = "")
  public SAMLAttributeProfile getAttributeProfile() {
    return attributeProfile;
  }

  public void setAttributeProfile(SAMLAttributeProfile attributeProfile) {
    this.attributeProfile = attributeProfile;
  }

  public SAML2ServiceProvider singleLogoutProfile(SingleLogoutProfile singleLogoutProfile) {
    this.singleLogoutProfile = singleLogoutProfile;
    return this;
  }

   /**
   * Get singleLogoutProfile
   * @return singleLogoutProfile
  **/
  @Schema(description = "")
  public SingleLogoutProfile getSingleLogoutProfile() {
    return singleLogoutProfile;
  }

  public void setSingleLogoutProfile(SingleLogoutProfile singleLogoutProfile) {
    this.singleLogoutProfile = singleLogoutProfile;
  }

  public SAML2ServiceProvider requestValidation(SAMLRequestValidation requestValidation) {
    this.requestValidation = requestValidation;
    return this;
  }

   /**
   * Get requestValidation
   * @return requestValidation
  **/
  @Schema(description = "")
  public SAMLRequestValidation getRequestValidation() {
    return requestValidation;
  }

  public void setRequestValidation(SAMLRequestValidation requestValidation) {
    this.requestValidation = requestValidation;
  }

  public SAML2ServiceProvider responseSigning(SAMLResponseSigning responseSigning) {
    this.responseSigning = responseSigning;
    return this;
  }

   /**
   * Get responseSigning
   * @return responseSigning
  **/
  @Schema(description = "")
  public SAMLResponseSigning getResponseSigning() {
    return responseSigning;
  }

  public void setResponseSigning(SAMLResponseSigning responseSigning) {
    this.responseSigning = responseSigning;
  }

  public SAML2ServiceProvider enableAssertionQueryProfile(Boolean enableAssertionQueryProfile) {
    this.enableAssertionQueryProfile = enableAssertionQueryProfile;
    return this;
  }

   /**
   * Get enableAssertionQueryProfile
   * @return enableAssertionQueryProfile
  **/
  @Schema(description = "")
  public Boolean isEnableAssertionQueryProfile() {
    return enableAssertionQueryProfile;
  }

  public void setEnableAssertionQueryProfile(Boolean enableAssertionQueryProfile) {
    this.enableAssertionQueryProfile = enableAssertionQueryProfile;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SAML2ServiceProvider saML2ServiceProvider = (SAML2ServiceProvider) o;
    return Objects.equals(this.issuer, saML2ServiceProvider.issuer) &&
        Objects.equals(this.serviceProviderQualifier, saML2ServiceProvider.serviceProviderQualifier) &&
        Objects.equals(this.assertionConsumerUrls, saML2ServiceProvider.assertionConsumerUrls) &&
        Objects.equals(this.defaultAssertionConsumerUrl, saML2ServiceProvider.defaultAssertionConsumerUrl) &&
        Objects.equals(this.idpEntityIdAlias, saML2ServiceProvider.idpEntityIdAlias) &&
        Objects.equals(this.singleSignOnProfile, saML2ServiceProvider.singleSignOnProfile) &&
        Objects.equals(this.attributeProfile, saML2ServiceProvider.attributeProfile) &&
        Objects.equals(this.singleLogoutProfile, saML2ServiceProvider.singleLogoutProfile) &&
        Objects.equals(this.requestValidation, saML2ServiceProvider.requestValidation) &&
        Objects.equals(this.responseSigning, saML2ServiceProvider.responseSigning) &&
        Objects.equals(this.enableAssertionQueryProfile, saML2ServiceProvider.enableAssertionQueryProfile);
  }

  @Override
  public int hashCode() {
    return Objects.hash(issuer, serviceProviderQualifier, assertionConsumerUrls, defaultAssertionConsumerUrl, idpEntityIdAlias, singleSignOnProfile, attributeProfile, singleLogoutProfile, requestValidation, responseSigning, enableAssertionQueryProfile);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SAML2ServiceProvider {\n");
    
    sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
    sb.append("    serviceProviderQualifier: ").append(toIndentedString(serviceProviderQualifier)).append("\n");
    sb.append("    assertionConsumerUrls: ").append(toIndentedString(assertionConsumerUrls)).append("\n");
    sb.append("    defaultAssertionConsumerUrl: ").append(toIndentedString(defaultAssertionConsumerUrl)).append("\n");
    sb.append("    idpEntityIdAlias: ").append(toIndentedString(idpEntityIdAlias)).append("\n");
    sb.append("    singleSignOnProfile: ").append(toIndentedString(singleSignOnProfile)).append("\n");
    sb.append("    attributeProfile: ").append(toIndentedString(attributeProfile)).append("\n");
    sb.append("    singleLogoutProfile: ").append(toIndentedString(singleLogoutProfile)).append("\n");
    sb.append("    requestValidation: ").append(toIndentedString(requestValidation)).append("\n");
    sb.append("    responseSigning: ").append(toIndentedString(responseSigning)).append("\n");
    sb.append("    enableAssertionQueryProfile: ").append(toIndentedString(enableAssertionQueryProfile)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
